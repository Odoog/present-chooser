import logging
import os
import random

from telegram import ParseMode

from data_access_layer.repository import Repository
from global_transferable_entities.user import User
from site_worker.worker import Worker
from state_constructor_parts.action import ActionChangeUserVariable, ActionChangeUserVariableToInput, ActionChangeStage, \
    Action, PrerequisiteAction
from bot import Bot
from message_parts.message import Message, MessageKeyboard, MessageKeyboardButton, MessagePicture
from global_transferable_entities.scope import Scope
from state_constructor_parts.stage import Stage
from data_access_layer.google_tables import SheetsClient, LocalBrandSheetClient
from statistics_entities.custom_stats import UserStatsCyclesFinishCount, UserStatsCyclesStartCount
from statistics_entities.stage_stats import StageStatsVisitCount
from statistics_entities.user_stats import UserStatsVisitCount, UserStatsCurrentStage

if __name__ == '__main__':

    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
    logging.info("Program started")

    # --- Helper methods ---

    def get_all_relevant_goods(scope, user):
        logging.info("get_all_relevant_goods | –ó–∞–ø—É—Å–∫–∞—é —Ñ–∏–ª—å—Ç—Ä –ø–æ–¥–∞—Ä–∫–æ–≤")
        all_goods = Repository.get_all_goods()
        logging.info("get_all_relevant_goods | –í—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ : " + " ".join([str(good.ind) for good in all_goods]))
        all_goods = list(filter(lambda good: user.get_variable("age") in good.age or good.is_universal, all_goods))
        logging.info("get_all_relevant_goods | –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É : " + " ".join([str(good.ind) for good in all_goods]))
        all_goods = list(filter(lambda good: user.get_variable("sex") in good.sex or good.is_universal, all_goods))
        logging.info("get_all_relevant_goods | –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—É : " + " ".join([str(good.ind) for good in all_goods]))
        all_goods = list(filter(lambda good: int(user.get_variable("spend").split('-')[0])
                                             <= good.price_actual
                                             <= int(user.get_variable("spend").split('-')[1]),
                                all_goods))
        logging.info("get_all_relevant_goods | –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ : " + " ".join([str(good.ind) for good in all_goods]))
        if user.get_variable("age") == "—Ä–µ–±–µ–Ω–∫—É":
            all_goods = list(filter(lambda good: user.get_variable("age2") in good.age2 or good.is_universal, all_goods))
            logging.info("get_all_relevant_goods | –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ç–æ—Ä–æ–º—É –≤–æ–∑—Ä–∞—Å—Ç—É –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ : " + " ".join([str(good.ind) for good in all_goods]))
        if user.get_variable("age") == "–≤–∑—Ä–æ—Å–ª–æ–º—É":
            all_goods = list(filter(lambda good: user.get_variable("receiver") in good.receiver or good.is_universal, all_goods))
            logging.info("get_all_relevant_goods | –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –¥–ª—è –≤–æ–∑—Ä–æ—Å–ª–æ–≥–æ : " + " ".join([str(good.ind) for good in all_goods]))
        all_goods = list(filter(lambda good: user.get_variable("reason") in good.reason or good.is_universal_reason and (user.get_variable("reason") == "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥" or user.get_variable("reason") is None),
                                all_goods))
        logging.info("get_all_relevant_goods | –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–≤–æ–¥—É : " + " ".join([str(good.ind) for good in all_goods]))
        all_goods = sorted(all_goods, key=lambda good: (-Repository.get_good_category_rating(scope, user, good.ind), random.random()))
        logging.info("get_all_relevant_goods | –ü–æ–¥–∞—Ä–∫–∏ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ : " + " ".join([str(good.ind) + " " + good.category + "\n" for good in all_goods]))
        return all_goods


    def sort_goods(scope, user):
        good_id = user.get_variable("good_id")
        goods = Repository.get_goods(user.get_variable("show_list"))
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª
        # logging.info("goods were: " + ",".join([str(good.ind) + " " + good.category + " " + str(Repository.get_good_category_rating(scope, user, good.ind)) + "\n" for good in goods]))
        goods = goods[:good_id] + sorted(goods[good_id:],
                                         key=lambda good: (-Repository.get_good_category_rating(scope, user, good.ind), random.random()))
        # logging.info("goods are: " + ",".join([str(good.ind) + " " + good.category + " " + str(Repository.get_good_category_rating(scope, user, good.ind)) + "\n" for good in goods]))
        user.set_variable("show_list", [good.ind for good in goods])


    def generate_text_for_current_good(_, user):
        good = Repository.get_good_by_id(int(user.get_variable("showing_id")))
        return "{} / {} {}\n–ú–∞–≥–∞–∑–∏–Ω: {}\n–¶–µ–Ω–∞: {}‚ÇΩ".format(
            good.name,
            good.brand,
            "üá∑üá∫" if good.is_local_brand else "",
            good.shop,
            good.price_actual)

    # --- State constructor ---

    Stage.set_common_statistics([StageStatsVisitCount()])
    User.set_common_statistics([UserStatsVisitCount(),
                                UserStatsCurrentStage()])

    _scope = Scope([

        Stage(name="NewUser",
              user_input_actions=[ActionChangeStage("Opening")]),

        Stage(name="Opening",
              message=Message(
                  text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ Symbol, –º–æ—è —Ä–∞–±–æ—Ç–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –≤—ã–±–∏—Ä–∞—Ç—å –∫–ª–∞—Å—Å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏. \n\n"
                       "–ö–æ–º—É –≤—ã –∏—â–µ—Ç–µ –ø–æ–¥–∞—Ä–æ–∫?",
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(
                              text="–†–µ–±–µ–Ω–∫—É",
                              actions=[ActionChangeUserVariable("age", "—Ä–µ–±–µ–Ω–∫—É")]),
                          MessageKeyboardButton(
                              text="–ü–æ–¥—Ä–æ—Å—Ç–∫—É",
                              actions=[ActionChangeUserVariable("age", "–ø–æ–¥—Ä–æ—Å—Ç–∫—É")]),
                          MessageKeyboardButton(
                              text="–í–∑—Ä–æ—Å–ª–æ–º—É",
                              actions=[ActionChangeUserVariable("age", "–≤–∑—Ä–æ—Å–ª–æ–º—É")])
                      ],
                      is_non_keyboard_input_allowed=False)),
              user_input_actions=[ActionChangeStage("AskingForSex"),
                                  Action(lambda scope, user, _, __: Repository.clear_good_rating(scope, user))],  # –û–±–Ω—É–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
              statistics=[UserStatsCyclesStartCount()]),

        Stage(name="AskingForSex",
              message=Message(
                  text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª",
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(
                              text=lambda _, user: "–ú—É–∂—á–∏–Ω–µ" if user.get_variable("age") == "–≤–∑—Ä–æ—Å–ª–æ–º—É" else "–ú–∞–ª—å—á–∏–∫—É",
                              actions=[ActionChangeUserVariable("sex", "–º–∞–ª—å—á–∏–∫—É")]),
                          MessageKeyboardButton(
                              text=lambda _, user: "–ñ–µ–Ω—â–∏–Ω–µ" if user.get_variable("age") == "–≤–∑—Ä–æ—Å–ª–æ–º—É" else "–î–µ–≤–æ—á–∫–µ",
                              actions=[ActionChangeUserVariable("sex", "–¥–µ–≤–æ—á–∫–µ")])
                      ],
                      is_non_keyboard_input_allowed=False)),
              user_input_actions=lambda _, user:
              {
                  "–ø–æ–¥—Ä–æ—Å—Ç–∫—É": [ActionChangeStage("AskingForMoney")],
                  "—Ä–µ–±–µ–Ω–∫—É": [ActionChangeStage("AskingForAge2")],
                  "–≤–∑—Ä–æ—Å–ª–æ–º—É": [ActionChangeStage("AskingForReceiver")]
              }.get(user.get_variable("age"))),

        Stage(name="AskingForAge2",
              message=Message(
                  text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç",
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(
                              text="4-7 –ª–µ—Ç",
                              actions=[ActionChangeUserVariable("age2", "4-7 –ª–µ—Ç")]),
                          MessageKeyboardButton(
                              text="8-12 –ª–µ—Ç",
                              actions=[ActionChangeUserVariable("age2", "8-12 –ª–µ—Ç")])
                          ],
                      is_non_keyboard_input_allowed=False)),
              user_input_actions=[ActionChangeStage("AskingForMoney")]),

        Stage(name="AskingForReceiver",
              message=Message(
                  text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(
                              text="–õ—é–±–∏–º–æ–º—É —á–µ–ª–æ–≤–µ–∫—É",
                              actions=[ActionChangeUserVariable("receiver", "–õ—é–±–∏–º–æ–º—É —á–µ–ª–æ–≤–µ–∫—É")]),
                          MessageKeyboardButton(
                              text="–î—Ä—É–≥—É, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫—É",
                              actions=[ActionChangeUserVariable("receiver", "–î—Ä—É–≥—É, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫—É")]),
                          MessageKeyboardButton(
                              text="–ö–æ–ª–ª–µ–≥–µ, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é",
                              actions=[ActionChangeUserVariable("receiver", "–ö–æ–ª–ª–µ–≥–µ, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é")]),
                          MessageKeyboardButton(
                              text="–°–µ–±–µ",
                              actions=[ActionChangeUserVariable("receiver", "–°–µ–±–µ")])
                      ],
                      buttons_layout=[2, 2],
                      is_non_keyboard_input_allowed=False)),
              user_input_actions=[ActionChangeStage("AskingForMoney")]),

        Stage(name="AskingForMoney",
              message=Message(
                  text="–°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å?",
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(
                              text="–î–æ 3000 —Ä—É–±–ª–µ–π",
                              actions=[ActionChangeUserVariable("spend", "0-3000")]),
                          MessageKeyboardButton(
                              text="–û—Ç 3000 –¥–æ 8000 —Ä—É–±–ª–µ–π",
                              actions=[ActionChangeUserVariable("spend", "3000-8000")]),
                          MessageKeyboardButton(
                              text="–ë–æ–ª—å—à–µ 8000 —Ä—É–±–ª–µ–π",
                              actions=[ActionChangeUserVariable("spend", "8000-999999")])
                      ],
                      buttons_layout=[2, 2, 1],
                      is_non_keyboard_input_allowed=False)),
              user_input_actions=lambda _, user:
                  {
                      "–°–µ–±–µ": [ActionChangeStage("ReadyToShow")],
                  }.get(user.get_variable("receiver"), [ActionChangeStage("AskingForReason")])),

        Stage(name="AskingForReason",
              message=Message(
                  text="–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–æ–≤–æ–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞?",
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(
                              text="–î–∞, —ç—Ç–æ –≤–∞–∂–Ω–æ",
                              actions=[ActionChangeStage("AskingForReason2")]),
                          MessageKeyboardButton(
                              text="–ù–µ—Ç",
                              actions=[ActionChangeUserVariable("reason", None),
                                       ActionChangeStage("ReadyToShow")]),
                      ],
                      is_non_keyboard_input_allowed=False))),

        Stage(name="AskingForReason2",
              message=Message(
                  text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–æ–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞?",
                  keyboard=MessageKeyboard(
                      buttons=lambda scope, user: [
                          MessageKeyboardButton(text=txt) for txt in ["8 –ú–∞—Ä—Ç–∞",
                                                                      "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
                                                                      "23 –§–µ–≤—Ä–∞–ª—è",
                                                                      "14 –§–µ–≤—Ä–∞–ª—è",
                                                                      "–ù–æ–≤—ã–π –≥–æ–¥",
                                                                      "–°–≤–∞–¥—å–±–∞, –≥–æ–¥–æ–≤—â–∏–Ω–∞",
                                                                      "–†–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞",
                                                                      "–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"]
                          if not (user.get_variable("sex") == "–º–∞–ª—å—á–∏–∫—É" and txt in ["8 –ú–∞—Ä—Ç–∞"]) and not (user.get_variable("sex") == "–¥–µ–≤–æ—á–∫–µ" and txt in ["23 –§–µ–≤—Ä–∞–ª—è"])
                      ],
                      buttons_layout=[2, 2, 2, 2],
                      is_non_keyboard_input_allowed=False)),
              user_input_actions=[ActionChangeUserVariableToInput("reason"),
                                  ActionChangeStage("ReadyToShow")]),

        Stage(name="ReadyToShow",
              message=Message(
                  text=lambda scope, user:
                      "–û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –¥–ª—è –≤–∞—Å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ :) \n\n–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å "
                      "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –∫–æ–≥–¥–∞ –≤—ã –Ω–∞–∂–º–µ—Ç–µ \"–°—Ç–æ–ø\", —è –ø–æ–∫–∞–∂—É –≤–∞–º –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º"
                      " –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å."
                      if len(get_all_relevant_goods(scope, user)) > 0 else
                      "–ü–æ–¥–∞—Ä–∫–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏, –ø–æ–∫–∞ –Ω–µ—Ç :( "
                      "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –±—é–¥–∂–µ—Ç",
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(text="–•–æ—Ä–æ—à–æ")
                      ],
                      is_non_keyboard_input_allowed=False)),
              user_input_actions=lambda _, user:
                                        {
                                            True: [
                                                ActionChangeStage("ShowingGoodPre"),
                                                ActionChangeUserVariable("good_id", 0),
                                                ActionChangeUserVariable("show_list", lambda scope, user: [good.ind for good in get_all_relevant_goods(scope, user)]),
                                                ActionChangeUserVariable("fav_list", []),
                                                ActionChangeUserVariable("showing_id", lambda _, user: user.get_variable("show_list")[user.get_variable("good_id")])
                                            ],
                                            False: [ActionChangeStage("Opening")]
                                        }.get(len(get_all_relevant_goods(_scope, user)) > 0)),

        Stage(name="ShowingGoodPre",
              message=Message(text="–í—ã–±–∏—Ä–∞–π—Ç–µ üòá"),
              prerequisite_actions=[PrerequisiteAction(lambda scope, user, sent_message, _: user.set_variable("message_to_delete_after_id",
                                                                                                              sent_message.message_id))],
              user_input_actions=[ActionChangeStage("ShowingGood")],
              is_gatehouse=True),

        Stage(name="ShowingGood",
              message=Message(
                  text=lambda scope, user: generate_text_for_current_good(scope, user),
                  picture=lambda scope, user: MessagePicture(
                      picture_file_link=Repository.get_good_by_id(user.get_variable("showing_id")).photo_link),
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(
                              text="–ù—Ä–∞–≤–∏—Ç—Å—è",
                              actions=[ActionChangeUserVariable("fav_list", lambda _, user: user.get_variable("fav_list") + [user.get_variable("show_list")[user.get_variable("good_id") - 1]])]),
                          MessageKeyboardButton(text="–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç"),
                          MessageKeyboardButton(
                              text="–°—Ç–æ–ø",
                              actions=[ActionChangeStage("ShowingFinish"),
                                       ActionChangeUserVariable("showing_limit_exceed", False),
                                       Action(lambda scope, user, _, bot: bot.delete_message(chat_id=user.chat_id,
                                                                                             message_id=user.get_variable("message_to_delete_after_id")))])
                      ],
                      is_inline_keyboard=True,
                      buttons_layout=[2, 1],
                      is_non_keyboard_input_allowed=False),
                  should_replace_last_message=True),
              user_input_actions=lambda scope, user:{
                         True: [
                             Action(lambda scope, user, input, _: Repository.change_good_rating(scope,
                                                                                                user,
                                                                                                user.get_variable("showing_id"),
                                                                                                1 if input == "–ù—Ä–∞–≤–∏—Ç—Å—è" else -1)),
                             ActionChangeUserVariable("good_id", lambda scope, user: user.get_variable("good_id") + 1),
                             Action(lambda scope, user, _, __: sort_goods(scope, user)),
                             # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                             ActionChangeUserVariable("showing_id",
                                                      lambda _, user: user.get_variable("show_list")[user.get_variable("good_id")])
                         ],
                         False: [
                             ActionChangeStage("ShowingFinish"),
                             ActionChangeUserVariable("showing_limit_exceed", True),
                             Action(lambda scope, user, _, bot: bot.delete_message(chat_id=user.chat_id,
                                                                                   message_id=user.get_variable("message_to_delete_after_id")))
                         ]
                     }.get(user.get_variable("good_id") + 1 < len(user.get_variable("show_list")))),

        Stage(name="ShowingFinish",
              message=Message(
                  text=lambda scope, user:
                      ("–Ø –ø–æ–∫–∞–∑–∞–ª –≤—Å—ë, —á—Ç–æ —Å–º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å:)\n" if user.get_variable("showing_limit_exceed") else "") +
                      "–í—Å–µ –ø–æ–¥–∞—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å, —Å–æ–±—Ä–∞–Ω—ã [–∑–¥–µ—Å—å]({}) :) –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!".format(
                          worker.build_site(user.get_variable("fav_list")))
                      if len(user.get_variable("fav_list")) > 0
                      else "–ñ–∞–ª—å, —á—Ç–æ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Å–º–æ–≥–ª–∏ –¥–ª—è –≤–∞—Å –ø–æ–¥–æ–±—Ä–∞—Ç—å üòî",
                  text_parse_mode=ParseMode.MARKDOWN,
                  keyboard=MessageKeyboard(
                      buttons=[
                          MessageKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫",
                                                actions=[ActionChangeStage("Opening")])
                      ],
                      is_non_keyboard_input_allowed=False),
                  should_delete_last_message=True),
              statistics=[UserStatsCyclesFinishCount()])

    ], main_stage_name="MainMenu")

    SheetsClient(os.environ['sheets_token']).synchronize()
    LocalBrandSheetClient(os.environ['local_brand_sheet_token']).synchronize()

    worker = Worker()
    worker.generate_goods_files()

    Bot(os.environ['telegram_token'], _scope).start_polling(poll_interval=2,
                                                            poll_timeout=1)
